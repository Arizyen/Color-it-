local Gems = {}
local Store = require(script.Parent)
setmetatable(Gems, { __index = Store })
-- Services ------------------------------------------------------------------------

-- Folders -------------------------------------------------------------------------

-- Modulescripts -------------------------------------------------------------------

-- KnitServices --------------------------------------------------------------------

-- Instances -----------------------------------------------------------------------

-- Configs -------------------------------------------------------------------------

-- Variables -----------------------------------------------------------------------

-- Tables --------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
-- LOCAL FUNCTIONS -----------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
-- GLOBAL FUNCTIONS ----------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
function Gems:ProcessReceipt(receiptInfo)
	local player = self:GetPlayerFromReceiptInfo(receiptInfo)

	if not player then
		return Enum.ProductPurchaseDecision.NotProcessedYet
	end

	local gemsCount = self.GemsInfo.infos[self.GemsStore[receiptInfo.ProductId]].count

	if self.InventoryManager.AddGems(player, gemsCount, true) then
		self.MessageService:SendMessageToPlayer(
			player,
			"You have purchased " .. tostring(gemsCount) .. " gems!",
			"GemPurchase"
		)
		self:PlayerSpentRobux(player, receiptInfo.CurrencySpent)
		return Enum.ProductPurchaseDecision.PurchaseGranted
	else
		self.MessageService:SendMessageToPlayer(
			player,
			"Error: your gems purchase of " .. tostring(gemsCount) .. " cannot currently be processed.",
			"Error"
		)
		return Enum.ProductPurchaseDecision.NotProcessedYet
	end
end
------------------------------------------------------------------------------------------------------------------------
-- VIRTUAL METHODS IMPLEMENTATION --------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
function Gems:IsValid(assetId)
	return self.GemsStore[assetId] ~= nil and self.GemsInfo.infos[self.GemsStore[assetId]] ~= nil
end
------------------------------------------------------------------------------------------------------------------------
-- CONNECTIONS ---------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
-- RUNNING FUNCTIONS ---------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

return Gems
